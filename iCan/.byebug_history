c
ability.can? :read, Article
ability.can? :update, Article
ability
ability.can?
user
ability.can? :read, Article
ability.can? :modify, Article
ability.can? :destroy, Article
user.role.name
ability.can? :update, Article
ability = Ability.new(user)
user
c
user.role.name
user.role
ability.can? :, Article
ability = Ability.new(user)
user.can? :read, Article
user
n
c
n
user.role?(:admin)
n89
user
n
c
n
@user
n
@user
n
exit
n
user.role_id
n
role
n
c
role.id
role=Role.find_by(name: "cliente")
role=Role..find_by(name: "cliente")
role.id
role=Role.select("id").find_by(name: "cliente")
Role.select("id").find_by(name: "cliente")
user.role_id
user.role_id = Role.select("id").find_by(name: "cliente")
user.role_id = Role.find_by(name: "cliente")
user.role_id
user.role_id = Role.find_by(name: "cliente")
Role.find_by(name: "cliente")
user.role_id
user
@role
n
c
n
c
n
@user2
n
registration.user
@role
registration
n
registration
user_params
c
@role1
@role
@user
registration
n
c
@user
@role
role
@user
registration.user.role
registration.user.role_id
registration.user
registration.name
registration.email
registration.created_at
registration.role_id
registration.user.name
registration.user
registration.role
registration
registrion
n
c
registration.user
registration.role
n
c
user_params
registration.role
n
c
@role
registration.create
@user
n
registration.user
registration
n
user_params
c
current_user
c
n
c
n
c
n
c
n
ROLES.has_key?(role_id.to_i) ? ROLES[role_id.to_i] : ROLES[0]
ROLES.has_key?(role_id.to_i)
role_id
ROLES
@role
@user
n
c
n
@user
c
user
n
user
user_params
